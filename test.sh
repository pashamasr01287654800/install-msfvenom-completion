#!/usr/bin/env zsh
# Installer/Updater for msfvenom zsh autocomplete
# Save as install-msfvenom-completion_zsh.sh and run with:
# sudo zsh install-msfvenom-completion_zsh.sh

INSTALL_PATH="/usr/share/zsh/site-functions/_msfvenom"
CACHE_DIR="/var/cache/msfvenom_completion"
PAYLOADS="$CACHE_DIR/payloads.txt"
ENCODERS="$CACHE_DIR/encoders.txt"
FORMATS="$CACHE_DIR/formats.txt"
PLATFORMS="$CACHE_DIR/platforms.txt"
ARCHS="$CACHE_DIR/archs.txt"
OPTIONS="$CACHE_DIR/options.txt"
BIN_UPDATE="/usr/local/bin/msfupdate-completion-update"

_build_cache_local() {
  mkdir -p "$CACHE_DIR"
  msfvenom -l payloads 2>/dev/null | awk '{print $1}' | grep '/' >| "$PAYLOADS" 2>/dev/null || true
  msfvenom -l encoders 2>/dev/null | awk '{print $1}' >| "$ENCODERS" 2>/dev/null || true
  msfvenom -l formats 2>/dev/null | awk '{print $1}' >| "$FORMATS" 2>/dev/null || true
  msfvenom --list platforms 2>/dev/null | awk 'NR>1 {print $1}' >| "$PLATFORMS" 2>/dev/null || true
  msfvenom --list archs 2>/dev/null | awk 'NR>1 {print $1}' >| "$ARCHS" 2>/dev/null || true
  cat >| "$OPTIONS" <<'EOL'
-p
-f
-e
-h
-l
--list
--platform
--arch
--payload-options
--help
LHOST
LPORT
lhost
lport
EOL
}

_init_cache() {
  # avoid zsh "no matches found" by checking dir exists
  if [[ -d "$CACHE_DIR" ]]; then
    rm -rf "$CACHE_DIR"/* 2>/dev/null || true
  else
    mkdir -p "$CACHE_DIR"
  fi
  _build_cache_local
}

# ensure destination dir exists before writing
mkdir -p "$(dirname "$INSTALL_PATH")"

# write the zsh completion file with embedded cache-builder + update function
cat >| "$INSTALL_PATH" <<'EOF'
#compdef msfvenom
# msfvenom zsh completion generated by installer
CACHE_DIR="/var/cache/msfvenom_completion"
PAYLOADS="$CACHE_DIR/payloads.txt"
ENCODERS="$CACHE_DIR/encoders.txt"
FORMATS="$CACHE_DIR/formats.txt"
PLATFORMS="$CACHE_DIR/platforms.txt"
ARCHS="$CACHE_DIR/archs.txt"
OPTIONS="$CACHE_DIR/options.txt"

_build_cache() {
  mkdir -p "$CACHE_DIR"
  msfvenom -l payloads 2>/dev/null | awk '{print $1}' | grep '/' >| "$PAYLOADS" 2>/dev/null || true
  msfvenom -l encoders 2>/dev/null | awk '{print $1}' >| "$ENCODERS" 2>/dev/null || true
  msfvenom -l formats 2>/dev/null | awk '{print $1}' >| "$FORMATS" 2>/dev/null || true
  msfvenom --list platforms 2>/dev/null | awk 'NR>1 {print $1}' >| "$PLATFORMS" 2>/dev/null || true
  msfvenom --list archs 2>/dev/null | awk 'NR>1 {print $1}' >| "$ARCHS" 2>/dev/null || true
  cat >| "$OPTIONS" <<EOL
-p
-f
-e
-h
-l
--list
--platform
--arch
--payload-options
--help
LHOST
LPORT
lhost
lport
EOL
}

msfupdate-completion-update() {
  echo "[*] Updating msfvenom autocomplete cache..."
  _build_cache
  echo "[+] Cache updated in $CACHE_DIR"
}

_msfvenom_completion() {
  typeset -A opt_args
  local -a expl
  local cur prev lc
  cur=${words[CURRENT]}
  prev=${words[CURRENT-1]}
  lc=${cur:l}   # zsh lowercase for case-insensitive match

  # match user typing lhost/lport case-insensitive and offer auto '=' with no trailing space
  if [[ "$lc" == lhost* || "$lc" == lport* ]]; then
    # try compadd with -S '' then fallback
    compadd -S '' 'LHOST=' 'lhost=' 'LPORT=' 'lport=' 2>/dev/null || compadd 'LHOST=' 'lhost=' 'LPORT=' 'lport='
    # prevent trailing space (works on most zsh versions)
    compstate[nospace]=1 2>/dev/null || true
    return
  fi

  if [[ $prev == "-p" ]]; then
    if [[ -s "$PAYLOADS" ]]; then
      compadd -- ${(f)"$(<"$PAYLOADS")"}
    fi
    return
  fi

  if [[ $prev == "-f" ]]; then
    if [[ -s "$FORMATS" ]]; then
      compadd -- ${(f)"$(<"$FORMATS")"}
    fi
    return
  fi

  if [[ $prev == "--platform" ]]; then
    if [[ -s "$PLATFORMS" ]]; then
      compadd -- ${(f)"$(<"$PLATFORMS")"}
    fi
    return
  fi

  if [[ $prev == "--arch" ]]; then
    if [[ -s "$ARCHS" ]]; then
      compadd -- ${(f)"$(<"$ARCHS")"}
    fi
    return
  fi

  if [[ $prev == "-e" ]]; then
    if [[ -s "$ENCODERS" ]]; then
      compadd -- ${(f)"$(<"$ENCODERS")"}
    fi
    return
  fi

  # contextual completions if any of the flags exist anywhere on the command line
  if [[ " ${words[*]} " == *" -p "* ]]; then
    if [[ -s "$PAYLOADS" ]]; then
      compadd -- ${(f)"$(<"$PAYLOADS")"}
    fi
    return
  fi

  # default: suggest options
  if [[ -s "$OPTIONS" ]]; then
    compadd -- ${(f)"$(<"$OPTIONS")"}
  fi
}
compdef _msfvenom_completion msfvenom
EOF

chmod 644 "$INSTALL_PATH"

# install a system-wide updater script so user can run: sudo msfupdate-completion-update
cat >| "$BIN_UPDATE" <<'SH'
#!/usr/bin/env bash
CACHE_DIR="/var/cache/msfvenom_completion"
PAYLOADS="$CACHE_DIR/payloads.txt"
ENCODERS="$CACHE_DIR/encoders.txt"
FORMATS="$CACHE_DIR/formats.txt"
PLATFORMS="$CACHE_DIR/platforms.txt"
ARCHS="$CACHE_DIR/archs.txt"
OPTIONS="$CACHE_DIR/options.txt"

_build_cache() {
  mkdir -p "$CACHE_DIR"
  msfvenom -l payloads 2>/dev/null | awk '{print $1}' | grep '/' > "$PAYLOADS" 2>/dev/null || true
  msfvenom -l encoders 2>/dev/null | awk '{print $1}' > "$ENCODERS" 2>/dev/null || true
  msfvenom -l formats 2>/dev/null | awk '{print $1}' > "$FORMATS" 2>/dev/null || true
  msfvenom --list platforms 2>/dev/null | awk 'NR>1 {print $1}' > "$PLATFORMS" 2>/dev/null || true
  msfvenom --list archs 2>/dev/null | awk 'NR>1 {print $1}' > "$ARCHS" 2>/dev/null || true
  cat > "$OPTIONS" <<EOL
-p
-f
-e
-h
-l
--list
--platform
--arch
--payload-options
--help
LHOST
LPORT
lhost
lport
EOL
}

echo "[*] Updating msfvenom autocomplete cache..."
_build_cache
echo "[+] Cache updated in $CACHE_DIR"
SH

chmod 755 "$BIN_UPDATE"

# init cache locally then try to load completion now for current zsh session if present
_init_cache

if [[ -n $ZSH_VERSION ]]; then
  autoload -U compinit >/dev/null 2>&1 || true
  compinit >/dev/null 2>&1 || true
  if [[ -f "$INSTALL_PATH" ]]; then
    source "$INSTALL_PATH" >/dev/null 2>&1 || true
  fi
fi

echo "[*] Installing/Updating msfvenom-completion (zsh)..."
echo "[+] Installation complete. Restart your shell or run: source $INSTALL_PATH"
echo "[*] To update cache later run: sudo msfupdate-completion-update"